(benchmark binarysearch32s016.smt
:source {
We write an arbitrary value into an array, assume that the array is sorted,
and finally verify that the binary search algorithm always finds this value.
Bit-width of elements: 32
Size of array: 16 elements

Contributed by Robert Brummayer (robert.brummayer@gmail.com).
}
:status unsat
:category { crafted }
:logic QF_AUFBV
:extrafuns ((a17 Array[4:32]))
:extrafuns ((search_val BitVec[32]))
:extrafuns ((search_index BitVec[4]))
:formula
(let (?e1 bv0[4])
(let (?e2 bv1[4])
(let (?e3 bv2[4])
(let (?e4 bv3[4])
(let (?e5 bv4[4])
(let (?e6 bv5[4])
(let (?e7 bv6[4])
(let (?e8 bv7[4])
(let (?e9 bv8[4])
(let (?e10 bv9[4])
(let (?e11 bv10[4])
(let (?e12 bv11[4])
(let (?e13 bv12[4])
(let (?e14 bv13[4])
(let (?e15 bv14[4])
(let (?e16 bv15[4])
(let (?e20 (store a17 search_index search_val))
(let (?e21 bv1[1])
(let (?e22 (select ?e20 ?e1))
(let (?e23 (select ?e20 ?e2))
(let (?e24 (ite (bvult ?e23 ?e22) bv1[1] bv0[1]))
(let (?e25 (bvand ?e21 (bvnot ?e24)))
(let (?e26 (select ?e20 ?e3))
(let (?e27 (ite (bvult ?e26 ?e23) bv1[1] bv0[1]))
(let (?e28 (bvand ?e25 (bvnot ?e27)))
(let (?e29 (select ?e20 ?e4))
(let (?e30 (ite (bvult ?e29 ?e26) bv1[1] bv0[1]))
(let (?e31 (bvand ?e28 (bvnot ?e30)))
(let (?e32 (select ?e20 ?e5))
(let (?e33 (ite (bvult ?e32 ?e29) bv1[1] bv0[1]))
(let (?e34 (bvand ?e31 (bvnot ?e33)))
(let (?e35 (select ?e20 ?e6))
(let (?e36 (ite (bvult ?e35 ?e32) bv1[1] bv0[1]))
(let (?e37 (bvand ?e34 (bvnot ?e36)))
(let (?e38 (select ?e20 ?e7))
(let (?e39 (ite (bvult ?e38 ?e35) bv1[1] bv0[1]))
(let (?e40 (bvand ?e37 (bvnot ?e39)))
(let (?e41 (select ?e20 ?e8))
(let (?e42 (ite (bvult ?e41 ?e38) bv1[1] bv0[1]))
(let (?e43 (bvand ?e40 (bvnot ?e42)))
(let (?e44 (select ?e20 ?e9))
(let (?e45 (ite (bvult ?e44 ?e41) bv1[1] bv0[1]))
(let (?e46 (bvand ?e43 (bvnot ?e45)))
(let (?e47 (select ?e20 ?e10))
(let (?e48 (ite (bvult ?e47 ?e44) bv1[1] bv0[1]))
(let (?e49 (bvand ?e46 (bvnot ?e48)))
(let (?e50 (select ?e20 ?e11))
(let (?e51 (ite (bvult ?e50 ?e47) bv1[1] bv0[1]))
(let (?e52 (bvand ?e49 (bvnot ?e51)))
(let (?e53 (select ?e20 ?e12))
(let (?e54 (ite (bvult ?e53 ?e50) bv1[1] bv0[1]))
(let (?e55 (bvand ?e52 (bvnot ?e54)))
(let (?e56 (select ?e20 ?e13))
(let (?e57 (ite (bvult ?e56 ?e53) bv1[1] bv0[1]))
(let (?e58 (bvand ?e55 (bvnot ?e57)))
(let (?e59 (select ?e20 ?e14))
(let (?e60 (ite (bvult ?e59 ?e56) bv1[1] bv0[1]))
(let (?e61 (bvand ?e58 (bvnot ?e60)))
(let (?e62 (select ?e20 ?e15))
(let (?e63 (ite (bvult ?e62 ?e59) bv1[1] bv0[1]))
(let (?e64 (bvand ?e61 (bvnot ?e63)))
(let (?e65 (select ?e20 ?e16))
(let (?e66 (ite (bvult ?e65 ?e62) bv1[1] bv0[1]))
(let (?e67 (bvand ?e64 (bvnot ?e66)))
(let (?e68 bv0[1])
(let (?e69 (bvadd (bvnot ?e1) ?e2))
(let (?e70 (bvadd ?e16 ?e69))
(let (?e71 (bvudiv ?e70 ?e3))
(let (?e72 (bvadd ?e1 ?e71))
(let (?e73 (select ?e20 ?e72))
(let (?e74 (ite (= search_val ?e73) bv1[1] bv0[1]))
(let (?e75 (ite (bvult search_val ?e73) bv1[1] bv0[1]))
(let (?e76 (ite (bvult ?e73 search_val) bv1[1] bv0[1]))
(let (?e77 (bvand (bvnot ?e68) (bvnot ?e74)))
(let (?e78 (bvadd (bvnot ?e2) ?e2))
(let (?e79 (bvadd ?e72 ?e78))
(let (?e80 (ite (= bv1[1] ?e75) ?e79 ?e16))
(let (?e81 (bvadd ?e2 ?e72))
(let (?e82 (ite (= bv1[1] ?e76) ?e81 ?e1))
(let (?e83 (bvadd ?e2 (bvnot ?e82)))
(let (?e84 (bvadd ?e80 ?e83))
(let (?e85 (bvudiv ?e84 ?e3))
(let (?e86 (bvadd ?e82 ?e85))
(let (?e87 (select ?e20 ?e86))
(let (?e88 (ite (= search_val ?e87) bv1[1] bv0[1]))
(let (?e89 (ite (bvult search_val ?e87) bv1[1] bv0[1]))
(let (?e90 (ite (bvult ?e87 search_val) bv1[1] bv0[1]))
(let (?e91 (bvand ?e77 (bvnot ?e88)))
(let (?e92 (bvadd ?e78 ?e86))
(let (?e93 (ite (= bv1[1] ?e89) ?e92 ?e80))
(let (?e94 (bvadd ?e2 ?e86))
(let (?e95 (ite (= bv1[1] ?e90) ?e94 ?e82))
(let (?e96 (bvadd ?e2 (bvnot ?e95)))
(let (?e97 (bvadd ?e93 ?e96))
(let (?e98 (bvudiv ?e97 ?e3))
(let (?e99 (bvadd ?e95 ?e98))
(let (?e100 (select ?e20 ?e99))
(let (?e101 (ite (= search_val ?e100) bv1[1] bv0[1]))
(let (?e102 (ite (bvult search_val ?e100) bv1[1] bv0[1]))
(let (?e103 (ite (bvult ?e100 search_val) bv1[1] bv0[1]))
(let (?e104 (bvand ?e91 (bvnot ?e101)))
(let (?e105 (bvadd ?e78 ?e99))
(let (?e106 (ite (= bv1[1] ?e102) ?e105 ?e93))
(let (?e107 (bvadd ?e2 ?e99))
(let (?e108 (ite (= bv1[1] ?e103) ?e107 ?e95))
(let (?e109 (bvadd ?e2 (bvnot ?e108)))
(let (?e110 (bvadd ?e106 ?e109))
(let (?e111 (bvudiv ?e110 ?e3))
(let (?e112 (bvadd ?e108 ?e111))
(let (?e113 (select ?e20 ?e112))
(let (?e114 (ite (= search_val ?e113) bv1[1] bv0[1]))
(let (?e115 (ite (bvult search_val ?e113) bv1[1] bv0[1]))
(let (?e116 (ite (bvult ?e113 search_val) bv1[1] bv0[1]))
(let (?e117 (bvand ?e104 (bvnot ?e114)))
(let (?e118 (bvadd ?e78 ?e112))
(let (?e119 (ite (= bv1[1] ?e115) ?e118 ?e106))
(let (?e120 (bvadd ?e2 ?e112))
(let (?e121 (ite (= bv1[1] ?e116) ?e120 ?e108))
(let (?e122 (bvadd ?e2 (bvnot ?e121)))
(let (?e123 (bvadd ?e119 ?e122))
(let (?e124 (bvudiv ?e123 ?e3))
(let (?e125 (bvadd ?e121 ?e124))
(let (?e126 (select ?e20 ?e125))
(let (?e127 (ite (= search_val ?e126) bv1[1] bv0[1]))
(let (?e128 (bvand ?e117 (bvnot ?e127)))
(let (?e129 (bvand ?e67 ?e128))
(not (= ?e129 bv0[1]))
)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

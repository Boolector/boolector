(benchmark count3inc
:logic QF_BV
:extrafuns ((s0 BitVec[3]))
:extrafuns ((zero BitVec[3]))
:extrafuns ((one BitVec[3]))
:extrafuns ((goal BitVec[3]))
:assumption (= goal bv7[3])
:assumption (= zero bv0[3])
:assumption (= one bv1[3])
:assumption (= s0 zero)
:formula (= s0 goal)
:extrafuns ((r1 BitVec[1]))
:extrafuns ((e1 BitVec[1]))
:extrafuns ((s1 BitVec[3]))
:assumption (= s1 (ite (= r1 bit1) zero (ite (= e1 bit1) (bvadd s0 one) s0)))
:formula (= s1 goal)
:extrafuns ((r2 BitVec[1]))
:extrafuns ((e2 BitVec[1]))
:extrafuns ((s2 BitVec[3]))
:assumption (= s2 (ite (= r2 bit1) zero (ite (= e2 bit1) (bvadd s1 one) s1)))
:formula (= s2 goal)
:extrafuns ((r3 BitVec[1]))
:extrafuns ((e3 BitVec[1]))
:extrafuns ((s3 BitVec[3]))
:assumption (= s3 (ite (= r3 bit1) zero (ite (= e3 bit1) (bvadd s2 one) s2)))
:formula (= s3 goal)
:extrafuns ((r4 BitVec[1]))
:extrafuns ((e4 BitVec[1]))
:extrafuns ((s4 BitVec[3]))
:assumption (= s4 (ite (= r4 bit1) zero (ite (= e4 bit1) (bvadd s3 one) s3)))
:formula (= s4 goal)
:extrafuns ((r5 BitVec[1]))
:extrafuns ((e5 BitVec[1]))
:extrafuns ((s5 BitVec[3]))
:assumption (= s5 (ite (= r5 bit1) zero (ite (= e5 bit1) (bvadd s4 one) s4)))
:formula (= s5 goal)
:extrafuns ((r6 BitVec[1]))
:extrafuns ((e6 BitVec[1]))
:extrafuns ((s6 BitVec[3]))
:assumption (= s6 (ite (= r6 bit1) zero (ite (= e6 bit1) (bvadd s5 one) s5)))
:formula (= s6 goal)
;:extrafuns ((r7 BitVec[1]))
;:extrafuns ((e7 BitVec[1]))
;:extrafuns ((s7 BitVec[3]))
;:assumption (= s7 (ite (= r7 bit1) zero (ite (= e7 bit1) (bvadd s6 one) s6)))
;:formula (= s7 goal)
)

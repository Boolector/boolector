(benchmark nextpoweroftwo016.smt
:source {
We verify the correctness of the "next power of 2 algorithm"
from the book "hacker's delight" (Warren Jr., Henry).

Algorithm:
int next_power_of_2 (int x)
\{
  int i;
  x-- >> nextpoweroftwo016.smt;
  for (i = 1; i < sizeof(int) * 8; i = i * 2)
  x = x | (x >> i)
  return x + 1;
\}

Bit-width: 16

Contributed by Robert Brummayer (robert.brummayer@gmail.com).
}
:status unsat
:category { crafted }
:logic QF_BV
:extrafuns ((x BitVec[16]))
:formula
(let (?e1 bv1[16])
(let (?e2 bv2[16])
(let (?e3 bv4[16])
(let (?e4 bv8[16])
(let (?e5 bv16[16])
(let (?e6 bv32[16])
(let (?e7 bv64[16])
(let (?e8 bv128[16])
(let (?e9 bv256[16])
(let (?e10 bv512[16])
(let (?e11 bv1024[16])
(let (?e12 bv2048[16])
(let (?e13 bv4096[16])
(let (?e14 bv8192[16])
(let (?e15 bv16384[16])
(let (?e16 bv32768[16])
(let (?e18 (bvadd (bvnot ?e1) ?e1))
(let (?e19 (bvadd x ?e18))
(let (?e20 bv1[4])
(let (?e21 (extract[15:15] ?e19))
(let (?e22 (bvlshr ?e19 (zero_extend[12] ?e20)))
(let (?e23 (bvlshr (bvnot ?e19) (zero_extend[12] ?e20)))
(let (?e24 (ite (= bv1[1] ?e21) (bvnot ?e23) ?e22))
(let (?e25 (bvand (bvnot ?e19) (bvnot ?e24)))
(let (?e26 bv2[4])
(let (?e27 (extract[15:15] (bvnot ?e25)))
(let (?e28 (bvlshr (bvnot ?e25) (zero_extend[12] ?e26)))
(let (?e29 (bvlshr ?e25 (zero_extend[12] ?e26)))
(let (?e30 (ite (= bv1[1] ?e27) (bvnot ?e29) ?e28))
(let (?e31 (bvand ?e25 (bvnot ?e30)))
(let (?e32 bv3[4])
(let (?e33 (extract[15:15] (bvnot ?e31)))
(let (?e34 (bvlshr (bvnot ?e31) (zero_extend[12] ?e32)))
(let (?e35 (bvlshr ?e31 (zero_extend[12] ?e32)))
(let (?e36 (ite (= bv1[1] ?e33) (bvnot ?e35) ?e34))
(let (?e37 (bvand ?e31 (bvnot ?e36)))
(let (?e38 bv4[4])
(let (?e39 (extract[15:15] (bvnot ?e37)))
(let (?e40 (bvlshr (bvnot ?e37) (zero_extend[12] ?e38)))
(let (?e41 (bvlshr ?e37 (zero_extend[12] ?e38)))
(let (?e42 (ite (= bv1[1] ?e39) (bvnot ?e41) ?e40))
(let (?e43 (bvand ?e37 (bvnot ?e42)))
(let (?e44 bv5[4])
(let (?e45 (extract[15:15] (bvnot ?e43)))
(let (?e46 (bvlshr (bvnot ?e43) (zero_extend[12] ?e44)))
(let (?e47 (bvlshr ?e43 (zero_extend[12] ?e44)))
(let (?e48 (ite (= bv1[1] ?e45) (bvnot ?e47) ?e46))
(let (?e49 (bvand ?e43 (bvnot ?e48)))
(let (?e50 bv6[4])
(let (?e51 (extract[15:15] (bvnot ?e49)))
(let (?e52 (bvlshr (bvnot ?e49) (zero_extend[12] ?e50)))
(let (?e53 (bvlshr ?e49 (zero_extend[12] ?e50)))
(let (?e54 (ite (= bv1[1] ?e51) (bvnot ?e53) ?e52))
(let (?e55 (bvand ?e49 (bvnot ?e54)))
(let (?e56 bv7[4])
(let (?e57 (extract[15:15] (bvnot ?e55)))
(let (?e58 (bvlshr (bvnot ?e55) (zero_extend[12] ?e56)))
(let (?e59 (bvlshr ?e55 (zero_extend[12] ?e56)))
(let (?e60 (ite (= bv1[1] ?e57) (bvnot ?e59) ?e58))
(let (?e61 (bvand ?e55 (bvnot ?e60)))
(let (?e62 bv8[4])
(let (?e63 (extract[15:15] (bvnot ?e61)))
(let (?e64 (bvlshr (bvnot ?e61) (zero_extend[12] ?e62)))
(let (?e65 (bvlshr ?e61 (zero_extend[12] ?e62)))
(let (?e66 (ite (= bv1[1] ?e63) (bvnot ?e65) ?e64))
(let (?e67 (bvand ?e61 (bvnot ?e66)))
(let (?e68 bv9[4])
(let (?e69 (extract[15:15] (bvnot ?e67)))
(let (?e70 (bvlshr (bvnot ?e67) (zero_extend[12] ?e68)))
(let (?e71 (bvlshr ?e67 (zero_extend[12] ?e68)))
(let (?e72 (ite (= bv1[1] ?e69) (bvnot ?e71) ?e70))
(let (?e73 (bvand ?e67 (bvnot ?e72)))
(let (?e74 bv10[4])
(let (?e75 (extract[15:15] (bvnot ?e73)))
(let (?e76 (bvlshr (bvnot ?e73) (zero_extend[12] ?e74)))
(let (?e77 (bvlshr ?e73 (zero_extend[12] ?e74)))
(let (?e78 (ite (= bv1[1] ?e75) (bvnot ?e77) ?e76))
(let (?e79 (bvand ?e73 (bvnot ?e78)))
(let (?e80 bv11[4])
(let (?e81 (extract[15:15] (bvnot ?e79)))
(let (?e82 (bvlshr (bvnot ?e79) (zero_extend[12] ?e80)))
(let (?e83 (bvlshr ?e79 (zero_extend[12] ?e80)))
(let (?e84 (ite (= bv1[1] ?e81) (bvnot ?e83) ?e82))
(let (?e85 (bvand ?e79 (bvnot ?e84)))
(let (?e86 bv12[4])
(let (?e87 (extract[15:15] (bvnot ?e85)))
(let (?e88 (bvlshr (bvnot ?e85) (zero_extend[12] ?e86)))
(let (?e89 (bvlshr ?e85 (zero_extend[12] ?e86)))
(let (?e90 (ite (= bv1[1] ?e87) (bvnot ?e89) ?e88))
(let (?e91 (bvand ?e85 (bvnot ?e90)))
(let (?e92 bv13[4])
(let (?e93 (extract[15:15] (bvnot ?e91)))
(let (?e94 (bvlshr (bvnot ?e91) (zero_extend[12] ?e92)))
(let (?e95 (bvlshr ?e91 (zero_extend[12] ?e92)))
(let (?e96 (ite (= bv1[1] ?e93) (bvnot ?e95) ?e94))
(let (?e97 (bvand ?e91 (bvnot ?e96)))
(let (?e98 bv14[4])
(let (?e99 (extract[15:15] (bvnot ?e97)))
(let (?e100 (bvlshr (bvnot ?e97) (zero_extend[12] ?e98)))
(let (?e101 (bvlshr ?e97 (zero_extend[12] ?e98)))
(let (?e102 (ite (= bv1[1] ?e99) (bvnot ?e101) ?e100))
(let (?e103 (bvand ?e97 (bvnot ?e102)))
(let (?e104 bv15[4])
(let (?e105 (extract[15:15] (bvnot ?e103)))
(let (?e106 (bvlshr (bvnot ?e103) (zero_extend[12] ?e104)))
(let (?e107 (bvlshr ?e103 (zero_extend[12] ?e104)))
(let (?e108 (ite (= bv1[1] ?e105) (bvnot ?e107) ?e106))
(let (?e109 (bvand ?e103 (bvnot ?e108)))
(let (?e110 (bvadd ?e1 (bvnot ?e109)))
(let (?e111 bv0[1])
(let (?e112 (ite (= ?e1 ?e110) bv1[1] bv0[1]))
(let (?e113 (bvand (bvnot ?e111) (bvnot ?e112)))
(let (?e114 (ite (= ?e2 ?e110) bv1[1] bv0[1]))
(let (?e115 (bvand ?e113 (bvnot ?e114)))
(let (?e116 (ite (= ?e3 ?e110) bv1[1] bv0[1]))
(let (?e117 (bvand ?e115 (bvnot ?e116)))
(let (?e118 (ite (= ?e4 ?e110) bv1[1] bv0[1]))
(let (?e119 (bvand ?e117 (bvnot ?e118)))
(let (?e120 (ite (= ?e5 ?e110) bv1[1] bv0[1]))
(let (?e121 (bvand ?e119 (bvnot ?e120)))
(let (?e122 (ite (= ?e6 ?e110) bv1[1] bv0[1]))
(let (?e123 (bvand ?e121 (bvnot ?e122)))
(let (?e124 (ite (= ?e7 ?e110) bv1[1] bv0[1]))
(let (?e125 (bvand ?e123 (bvnot ?e124)))
(let (?e126 (ite (= ?e8 ?e110) bv1[1] bv0[1]))
(let (?e127 (bvand ?e125 (bvnot ?e126)))
(let (?e128 (ite (= ?e9 ?e110) bv1[1] bv0[1]))
(let (?e129 (bvand ?e127 (bvnot ?e128)))
(let (?e130 (ite (= ?e10 ?e110) bv1[1] bv0[1]))
(let (?e131 (bvand ?e129 (bvnot ?e130)))
(let (?e132 (ite (= ?e11 ?e110) bv1[1] bv0[1]))
(let (?e133 (bvand ?e131 (bvnot ?e132)))
(let (?e134 (ite (= ?e12 ?e110) bv1[1] bv0[1]))
(let (?e135 (bvand ?e133 (bvnot ?e134)))
(let (?e136 (ite (= ?e13 ?e110) bv1[1] bv0[1]))
(let (?e137 (bvand ?e135 (bvnot ?e136)))
(let (?e138 (ite (= ?e14 ?e110) bv1[1] bv0[1]))
(let (?e139 (bvand ?e137 (bvnot ?e138)))
(let (?e140 (ite (= ?e15 ?e110) bv1[1] bv0[1]))
(let (?e141 (bvand ?e139 (bvnot ?e140)))
(let (?e142 (ite (= ?e16 ?e110) bv1[1] bv0[1]))
(let (?e143 (bvand ?e141 (bvnot ?e142)))
(let (?e144 (ite (bvult ?e110 x) bv1[1] bv0[1]))
(let (?e145 (bvand (bvnot ?e143) (bvnot ?e144)))
(let (?e146 (bvlshr ?e110 (zero_extend[12] ?e20)))
(let (?e147 (extract[15:15] ?e146))
(let (?e148 (extract[15:15] x))
(let (?e149 (extract[14:0] ?e146))
(let (?e150 (extract[14:0] x))
(let (?e151 (ite (bvult ?e149 ?e150) bv1[1] bv0[1]))
(let (?e152 (bvand ?e147 (bvnot ?e148)))
(let (?e153 (bvand (bvnot ?e147) (bvnot ?e148)))
(let (?e154 (bvand ?e147 ?e148))
(let (?e155 (bvand ?e151 ?e153))
(let (?e156 (bvand ?e151 ?e154))
(let (?e157 (bvand (bvnot ?e155) (bvnot ?e156)))
(let (?e158 (bvand (bvnot ?e152) ?e157))
(let (?e159 (bvand ?e145 (bvnot ?e158)))
(let (?e160 (extract[15:15] ?e1))
(let (?e161 (extract[14:0] ?e1))
(let (?e162 (ite (bvult ?e150 ?e161) bv1[1] bv0[1]))
(let (?e163 (bvand ?e148 (bvnot ?e160)))
(let (?e164 (bvand (bvnot ?e148) (bvnot ?e160)))
(let (?e165 (bvand ?e148 ?e160))
(let (?e166 (bvand ?e162 ?e164))
(let (?e167 (bvand ?e162 ?e165))
(let (?e168 (bvand (bvnot ?e166) (bvnot ?e167)))
(let (?e169 (bvand (bvnot ?e163) ?e168))
(let (?e170 (bvand (bvnot ?e159) ?e169))
(not (= ?e170 bv0[1]))
))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
